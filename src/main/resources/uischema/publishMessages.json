{
  "connectorName": "kafkaTransport",
  "operationName": "publishMessages",
  "title": "Publish Messages",
  "help": "<h1>Publish Messages</h1> <b>The publishMessages operation allows you to publish messages to the Kafka brokers via Kafka topics.</b><br><br><ul><li><a href=\"https://ei.docs.wso2.com/en/latest/micro-integrator/references/connectors/kafka-connector/kafka-connector-config/\"> More Help </a></li></ul>",
  "elements": [
    {
      "type": "attributeGroup",
      "value": {
        "groupName": "PublishMessages",
        "elements": [
          {
            "type": "attribute",
            "value": {
              "name": "configRef",
              "displayName": "Connection",
              "inputType": "connection",
              "allowedConnectionTypes": [
                "kafka",
                "kafkaSecure"
              ],
              "defaultType": "connection.kafka",
              "defaultValue": "",
              "required": "true",
              "helpTip": "Connection to be used"
            }
          },
          {
            "type": "attributeGroup",
            "value": {
              "groupName": "General",
              "elements": [
                {
                  "type": "attribute",
                  "value": {
                    "name": "topic",
                    "displayName": "Topic",
                    "inputType": "stringOrExpression",
                    "defaultValue": "",
                    "required": "true",
                    "helpTip": "The name of the topic."
                  }
                },
                {
                  "type": "attribute",
                  "value": {
                    "name": "partitionNo",
                    "displayName": "Partition Number",
                    "inputType": "stringOrExpression",
                    "defaultValue": "",
                    "required": "true",
                    "helpTip": "The partition number of the topic."
                  }
                },
                {
                  "type": "attribute",
                  "value": {
                    "name": "key",
                    "displayName": "Key",
                    "inputType": "stringOrExpression",
                    "defaultValue": "",
                    "required": "false",
                    "helpTip": "The key of the message."
                  }
                },
                {
                  "type": "attribute",
                  "value": {
                    "name": "value",
                    "displayName": "Value",
                    "inputType": "stringOrExpression",
                    "defaultValue": "",
                    "required": "false",
                    "helpTip": "The value of the kafka message."
                  }
                }
              ]
            }
          },
          {
            "type": "attributeGroup",
            "value": {
              "groupName": "Headers",
              "isCollapsed": true,
              "elements": [
                {
                  "type": "attribute",
                  "value": {
                    "name": "forwardExistingHeaders",
                    "displayName": "Forward Existing Headers as Kafka Headers",
                    "inputType": "combo",
                    "defaultValue": "None",
                    "helpTip": "Specifies whether to include existing transport headers in the Kafka message; can be none, all, or filtered",
                    "required": "false",
                    "comboValues": [
                      "None",
                      "All",
                      "Filtered"
                    ]
                  }
                },
                {
                  "type": "attribute",
                  "value": {
                    "name": "kafkaHeaderPrefix",
                    "displayName": "Header Prefix to Filter Out",
                    "inputType": "stringOrExpression",
                    "defaultValue": "",
                    "helpTip": "Specifies a prefix to filter out the Kafka related headers from the transport headers that start when forwardExistingHeaders is set to filtered",
                    "required": "false",
                    "enableCondition": [
                      {
                        "forwardExistingHeaders": "Filtered"
                      }
                    ]
                  }
                },
                {
                  "type": "attribute",
                  "value": {
                    "name": "removeHeaderPrefix",
                    "displayName": "Remove Header Prefix Before Sending",
                    "inputType": "boolean",
                    "defaultValue": "",
                    "helpTip": "Indicates whether the configured prefix should be removed from header names before sending them to Kafka (applies when filtering).",
                    "required": "false",
                    "enableCondition": [
                      {
                        "forwardExistingHeaders": "Filtered"
                      }
                    ]
                  }
                },
                {
                  "type": "attribute",
                  "value": {
                    "name": "removeFilteredAfterSend",
                    "displayName": "Remove Filtered Headers After Sending",
                    "inputType": "boolean",
                    "defaultValue": "",
                    "helpTip": "Determines whether the filtered transport headers should be removed from the transport headers after being forwarded to Kafka.",
                    "required": "false",
                    "enableCondition": [
                      {
                        "forwardExistingHeaders": "Filtered"
                      }
                    ]
                  }
                },
                {
                  "type": "table",
                  "value": {
                    "name": "customHeaders",
                    "displayName": "Custom Headers",
                    "tableKey": "propertyName",
                    "tableValue": "propertyValue",
                    "addParamText": "Add Header",
                    "helpTip": "Define a fixed list of headers where each value can use expressions to resolve dynamically during execution.",
                    "elements": [
                      {
                        "type": "attribute",
                        "value": {
                          "name": "propertyName",
                          "displayName": "Header Name",
                          "inputType": "string",
                          "defaultValue": "",
                          "required": "true",
                          "helpTip": "The name of the header."
                        }
                      },
                      {
                        "type": "attribute",
                        "value": {
                          "name": "propertyValue",
                          "displayName": "Header Value",
                          "inputType": "stringOrExpression",
                          "defaultValue": "",
                          "required": "true",
                          "helpTip": "The value of the header."
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "type": "attributeGroup",
            "value": {
              "groupName": "Advanced",
              "isCollapsed": true,
              "elements": [
                {
                  "type": "attributeGroup",
                  "value": {
                    "groupName": "Avro Key Schema Configurations",
                    "isCollapsed": true,
                    "elements": [
                      {
                        "type": "attribute",
                        "value": {
                          "name": "keySchema",
                          "displayName": "Key Schema",
                          "inputType": "stringOrExpression",
                          "defaultValue": "",
                          "required": "false",
                          "helpTip": "The Schema of the configured key."
                        }
                      },
                      {
                        "type": "attribute",
                        "value": {
                          "name": "keySchemaId",
                          "displayName": "Key Schema ID",
                          "inputType": "stringOrExpression",
                          "defaultValue": "",
                          "required": "false",
                          "helpTip": "The Schema id of the key schema that is stored in the confluent schema registry."
                        }
                      },
                      {
                        "type": "attribute",
                        "value": {
                          "name": "keySchemaVersion",
                          "displayName": "Key Schema Version",
                          "inputType": "stringOrExpression",
                          "defaultValue": "",
                          "required": "false",
                          "helpTip": "The Version of the key schema that is stored in the confluent schema registry."
                        }
                      },
                      {
                        "type": "attribute",
                        "value": {
                          "name": "keySchemaSubject",
                          "displayName": "Key Schema Subject",
                          "inputType": "stringOrExpression",
                          "defaultValue": "",
                          "required": "false",
                          "helpTip": "The Subject of the key schema that is stored in the confluent schema registry."
                        }
                      },
                      {
                        "type": "attribute",
                        "value": {
                          "name": "keySchemaMetadata",
                          "displayName": "Key Schema Metadata",
                          "inputType": "stringOrExpression",
                          "defaultValue": "",
                          "required": "false",
                          "helpTip": "The Schema metadata of the key schema that is stored in the confluent schema registry."
                        }
                      },
                      {
                        "type": "attribute",
                        "value": {
                          "name": "keySchemaSoftDeleted",
                          "displayName": "Is soft deleted key schemas needed",
                          "inputType": "stringOrExpression",
                          "defaultValue": "false",
                          "required": "false",
                          "helpTip": "Whether soft deleted key schemas also need to be considered."
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "attributeGroup",
                  "value": {
                    "groupName": "Avro Value Schema Configurations",
                    "isCollapsed": true,
                    "elements": [
                      {
                        "type": "attribute",
                        "value": {
                          "name": "valueSchema",
                          "displayName": "Value Schema",
                          "inputType": "stringOrExpression",
                          "defaultValue": "",
                          "required": "false",
                          "helpTip": "The Schema of the configured value."
                        }
                      },
                      {
                        "type": "attribute",
                        "value": {
                          "name": "valueSchemaId",
                          "displayName": "Value Schema ID",
                          "inputType": "stringOrExpression",
                          "defaultValue": "",
                          "required": "false",
                          "helpTip": "The Schema id of the value schema that is stored in the confluent schema registry."
                        }
                      },
                      {
                        "type": "attribute",
                        "value": {
                          "name": "valueSchemaVersion",
                          "displayName": "Value Schema Version",
                          "inputType": "stringOrExpression",
                          "defaultValue": "",
                          "required": "false",
                          "helpTip": "The Version of the value schema that is stored in the confluent schema registry."
                        }
                      },
                      {
                        "type": "attribute",
                        "value": {
                          "name": "valueSchemaSubject",
                          "displayName": "Value Schema Subject",
                          "inputType": "stringOrExpression",
                          "defaultValue": "",
                          "required": "false",
                          "helpTip": "The Subject of the value schema that is stored in the confluent schema registry."
                        }
                      },
                      {
                        "type": "attribute",
                        "value": {
                          "name": "valueSchemaMetadata",
                          "displayName": "Value Schema Metadata",
                          "inputType": "stringOrExpression",
                          "defaultValue": "",
                          "required": "false",
                          "helpTip": "The Schema metadata of the value schema that is stored in the confluent schema registry."
                        }
                      },
                      {
                        "type": "attribute",
                        "value": {
                          "name": "valueSchemaSoftDeleted",
                          "displayName": "Is soft deleted value schemas needed",
                          "inputType": "stringOrExpression",
                          "defaultValue": "false",
                          "required": "false",
                          "helpTip": "Whether soft deleted value schemas also need to be considered."
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "attribute",
                  "value": {
                    "name": "customHeaderExpression",
                    "displayName": "Define Custom Headers via Expression",
                    "inputType": "stringOrExpression",
                    "defaultValue": "",
                    "helpTip": "Inject a list of headers via an expression that is evaluated at runtime. E.g., `json-eval($.headers)`.",
                    "required": ""
                  }
                },
                {
                  "type": "attribute",
                  "value": {
                    "name": "dlqTopic",
                    "displayName": "Dead Letter Queue Topic",
                    "inputType": "stringOrExpression",
                    "defaultValue": "",
                    "required": "",
                    "helpTip": "The topic name of the Dead Letter Queue to which the failed messages should be redirected. This is applicable only when the sendCallbackHandler class has support for Dead Letter Queue (DLQ) handling."
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
}
